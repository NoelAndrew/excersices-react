{"version":3,"sources":["components/AddCategory.jsx","components/GifItem.js","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.jsx"],"names":["AddCategory","onNewCategory","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","type","placeholder","value","onChange","target","onInputChange","GifItem","title","url","id","className","src","alt","getGifs","category","a","fetch","resp","json","data","gifs","map","img","images","downsized_medium","console","log","GifGrid","setImages","isLoading","setIsLoading","getImages","newImages","useEffect","useFetchGifs","image","GifExpertApp","categories","setCategories","newCategory","includes","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAU,IAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,sBAAMC,SATQ,SAACC,GACfA,EAAMC,iBACFJ,EAAWK,OAAOC,QAAU,IAEhCR,EAAeE,EAAWK,QAC1BJ,EAAc,MAId,SACI,uBACIM,KAAK,OACLC,YAAY,cACZC,MAAOT,EACPU,SAAU,SAACP,GAAD,OAjBA,SAACA,GACnBF,EAAcE,EAAMQ,OAAOF,OAgBEG,CAAcT,S,QCrBtCU,EAAU,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,IAAc,EAATC,GAClC,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAMH,EAAMI,IAAML,IACvB,kCAAMA,EAAN,W,uBCJCM,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbP,EADa,0FAC6EM,EAD7E,sBAEAE,MAAOR,GAFP,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAG,MACtB,CACIb,GAAIa,EAAIb,GACRF,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAGzCiB,QAAQC,IAAIN,GAZO,kBAaZA,GAbY,4CAAH,sDCGPO,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAEtB,ECFwB,SAAEA,GAC1B,MAA4BtB,mBAAS,IAArC,mBAAO+B,EAAP,KAAeK,EAAf,KACA,EAAkCpC,oBAAU,GAA5C,mBAAOqC,EAAP,KAAkBC,EAAlB,KAEOC,EAAS,uCAAG,4BAAAhB,EAAA,sEACSF,EAASC,GADlB,OACTkB,EADS,OAEfJ,EAAUI,GACVF,GAAa,GAHE,2CAAH,qDAUhB,OAJAG,qBAAU,WACNF,MACD,IAEI,CACHR,SACAM,aDd0BK,CAAcpB,GAApCS,EAAR,EAAQA,OAAQM,EAAhB,EAAgBA,UAEhB,OACI,qCACA,6BAAMf,IAEFe,GACC,6CAGD,qBAAKnB,UAAU,YAAf,SAEIa,EAAOF,KAAK,SAAEc,GAAF,OACR,cAAC,EAAD,eAESA,GADEA,EAAM1B,aEhBxB2B,EAAe,WAExB,MAAoC5C,mBAAS,CAAE,gBAA/C,mBAAO6C,EAAP,KAAmBC,EAAnB,KAKA,OACI,qCACI,8CACA,cAAC,EAAD,CACI/C,cARU,SAACgD,GAChBF,EAAWG,SAASD,IACnBD,EAAc,CAAEC,GAAH,mBAAmBF,QAS/BA,EAAWhB,KAAK,SAAAP,GAAQ,OACzB,cAAC,EAAD,CAEIA,SAAYA,GADNA,U,MCftB2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.562110dd.chunk.js","sourcesContent":["import { useState } from \"react\"\r\n\r\nexport const AddCategory = ( {onNewCategory} ) => {\r\n    const [inputValue, setInputValue] = useState( \"\" )\r\n    const onInputChange = (event) => {\r\n        setInputValue(event.target.value)\r\n    }\r\n    const onSubmmit = (event) => {\r\n        event.preventDefault();\r\n        if (inputValue.trim().length <= 1)  return;\r\n\r\n        onNewCategory( inputValue.trim() );\r\n        setInputValue(\"\")\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ onSubmmit }>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Buscar Gifs\"\r\n                value={inputValue}\r\n                onChange={(event) => onInputChange(event) }\r\n            />\r\n        </form>\r\n    )\r\n}","export const GifItem = ({ title, url, id }) => {\r\n    return(\r\n        <div className=\"card\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=GgG6XacPdVxUpaH8GZHP6ScqLbm4XW94&q=${ category }&limit=20`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => (\r\n        {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    ))\r\n    console.log(gifs);\r\n    return gifs;\r\n}","import { GifItem } from \"./GifItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { images, isLoading } = useFetchGifs( category );\r\n   \r\n    return (\r\n        <>\r\n        <h3>{ category }</h3>\r\n        {\r\n            isLoading &&\r\n            (<h2>Cargando...</h2>)\r\n        }\r\n        \r\n            <div className=\"card-grid\">\r\n                {\r\n                images.map( ( image ) => (\r\n                    <GifItem \r\n                        key ={ image.id }\r\n                        { ...image }\r\n                    />\r\n                ))}\r\n            </div> \r\n        </>\r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [images, setImages] = useState([]);\r\n    const [isLoading, setIsLoading] = useState( true );\r\n\r\n     const getImages = async() => {\r\n        const newImages = await getGifs( category );\r\n        setImages(newImages);\r\n        setIsLoading(false);\r\n     }\r\n\r\n    useEffect(() =>{\r\n        getImages();\r\n    }, []);\r\n\r\n    return {\r\n        images,\r\n        isLoading\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory, GifGrid } from \"./components\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([ 'Dragon ball' ]);\r\n    const onAddCategory = (newCategory) => {\r\n        if(categories.includes(newCategory)) return;\r\n            setCategories([ newCategory, ...categories])\r\n    }\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory \r\n                onNewCategory = { onAddCategory }\r\n            />\r\n    \r\n            {categories.map( category => (\r\n            <GifGrid \r\n                key={ category } \r\n                category = {category}\r\n            />))}\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './styles.css'\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}